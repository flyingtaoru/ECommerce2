package com.nice.search.service.impl;import com.alibaba.dubbo.config.annotation.Service;import com.nice.pojo.TbItem;import com.nice.search.service.ItemSearchService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Sort;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.solr.core.SolrTemplate;import org.springframework.data.solr.core.query.*;import org.springframework.data.solr.core.query.result.*;import java.util.*;@Servicepublic class ItemSearchServiceImpl implements ItemSearchService {    @Autowired    private SolrTemplate solrTemplate;    @Autowired    private RedisTemplate redisTemplate;    @Override    public Map<String, Object> search(Map searchMap) {        Map<String,Object> map = new HashMap<>();        // 高亮        map.putAll(searchList(searchMap));        // 分类        List categoryList = searchCategoryList(searchMap);        map.put("categoryList",categoryList);        // 品牌和规格        if(categoryList.size()>0){            map.putAll(searchBrandAndSpecList((String) categoryList.get(0)));        }        return map;    }    /**     * 更新solr     * @param list     */    @Override    public void importList(List list) {        solrTemplate.saveBeans(list);        solrTemplate.commit();        System.out.println("添加");    }    /**     * 删除solr     * @param goodsIds     */    @Override    public void deleteByGoodsIds(List goodsIds) {        Query query = new SimpleQuery();        Criteria criteria = new Criteria("item_goodsid").in(goodsIds);        query.addCriteria(criteria);        solrTemplate.delete(query);        solrTemplate.commit();        System.out.println("删除"+goodsIds);    }    /**     * 设置高亮显示     * @param searchMap     * @return     */    private Map searchList(Map searchMap){        Map map = new HashMap();        // 设置高亮查询        HighlightQuery query = new SimpleHighlightQuery();        HighlightOptions options = new HighlightOptions().addField("item_title");  // 高亮域        options.setSimplePrefix("<em style='color:red'>");   // 高亮前缀        options.setSimplePostfix("</em>");          // 后缀        query.setHighlightOptions(options);    // 设置高亮选项        // 根据关键字查询        //关键字空格处理        String keywords = (String) searchMap.get("keywords");        searchMap.put("keywords", keywords.replace(" ", ""));        Criteria criteria = new Criteria("item_keywords").is(searchMap.get("keywords"));        query.addCriteria(criteria);        // 根据类目过滤        if (!"".equals(searchMap.get("category"))) {            Criteria criteriaFilter = new Criteria("item_category").is(searchMap.get("category"));            FilterQuery query_F = new SimpleFilterQuery(criteriaFilter);            query.addFilterQuery(query_F);        }        // 根据品牌过滤        if (!"".equals(searchMap.get("brand"))) {            Criteria criteriaFilter = new Criteria("item_brand").is(searchMap.get("brand"));            FilterQuery query_F = new SimpleFilterQuery(criteriaFilter);            query.addFilterQuery(query_F);        }        // 根据规格过滤        if (searchMap.get("spec")!=null) {            Map<String,String> specMap = (Map<String, String>) searchMap.get("spec");            for (String key:specMap.keySet()) {                Criteria filterCriteria=new Criteria("item_spec_"+key).is(specMap.get(key));                FilterQuery filterQuery=new SimpleFilterQuery(filterCriteria);                query.addFilterQuery(filterQuery);            }        }        // 设置价格区间        if (!"".equals(searchMap.get("price"))) {            String[] prices = ((String) searchMap.get("price")).split("-");            if (!"0".equals(prices[0])) {   // 底价不为0                Criteria filterCriteria = new Criteria("item_price").greaterThanEqual(prices[0]);                FilterQuery filterQuery = new SimpleFilterQuery(filterCriteria);                query.addFilterQuery(filterQuery);            }            if (!"*".equals(prices[1])){   // 上限价格不为*                Criteria filterCriteria = new Criteria("item_price").lessThanEqual(prices[1]);                FilterQuery filterQuery = new SimpleFilterQuery(filterCriteria);                query.addFilterQuery(filterQuery);            }        }        // 分页        Integer pageNo = (Integer) searchMap.get("pageNo");        if (pageNo==null) {  // 默认当前页            pageNo = 1;        }        Integer pageSize = (Integer) searchMap.get("pageSize");        if (pageSize==null) {  // 默认每页数            pageSize = 20;        }        query.setOffset((pageNo-1)*pageSize);        query.setRows(pageSize);        // 排序        String sortValue = (String) searchMap.get("sort");        String sortField= (String) searchMap.get("sortField");//排序字段        if (sortValue!=null && !"".equals(sortValue)) {            System.out.println(123);            if ("ASC".equals(sortValue)) {                Sort sort = new Sort(Sort.Direction.ASC,"item_"+sortField);                query.addSort(sort);            }            if(sortValue.equals("DESC")){                Sort sort=new Sort(Sort.Direction.DESC, "item_"+sortField);                query.addSort(sort);            }        }        // 查询        HighlightPage<TbItem> tbItems = solrTemplate.queryForHighlightPage(query, TbItem.class);        for (HighlightEntry<TbItem> tbItemHighlightEntry : tbItems.getHighlighted()) {            TbItem item = tbItemHighlightEntry.getEntity();            if (tbItemHighlightEntry.getHighlights().size()>0 && tbItemHighlightEntry.getHighlights().get(0).getSnipplets().size()>0){                item.setTitle(tbItemHighlightEntry.getHighlights().get(0).getSnipplets().get(0));            }        }        map.put("rows",tbItems.getContent());        map.put("totalPages",tbItems.getTotalPages());  // 总页数        map.put("total",tbItems.getTotalElements());    // 总条目        return map;    }    /**     * 查询分类列表     * @param searchMap     * @return     */    private List searchCategoryList(Map searchMap) {        List<String> list = new ArrayList<>();        Query query = new SimpleQuery();        // 搜索条件        Criteria criteria = new Criteria("item_keywords").is(searchMap.get("keywords"));        query.addCriteria(criteria);        // 设置分组        GroupOptions options = new GroupOptions().addGroupByField("item_category");        query.setGroupOptions(options);        // 得到结果        GroupPage<TbItem> tbItems = solrTemplate.queryForGroupPage(query, TbItem.class);        GroupResult<TbItem> item_category = tbItems.getGroupResult("item_category");        Page<GroupEntry<TbItem>> groupEntries = item_category.getGroupEntries();        List<GroupEntry<TbItem>> content = groupEntries.getContent();        for (GroupEntry<TbItem> tbItemGroupEntry : content) {            list.add(tbItemGroupEntry.getGroupValue());        }        return list;    }    /**     * 缓存中查询品牌和规格 通过类别名称     * @param category     * @return     */    public Map searchBrandAndSpecList(String category) {        Map map = new HashMap();        // 通过类目名查询分类id        Long itemCat = (Long) redisTemplate.boundHashOps("itemCat").get(category);        if (itemCat!=null) {            // 分类id查询品牌            List brandList = (List) redisTemplate.boundHashOps("brandList").get(itemCat);            // 分类id查询规格            List specList = (List) redisTemplate.boundHashOps("specList").get(itemCat);            map.put("brandList", brandList);            map.put("specList", specList);        }        return map;    }}